
fantimote_hardwaretest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000001c2  00000256  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800120  00800120  00000276  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000276  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000065  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000029a  00000000  00000000  0000031b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001bd  00000000  00000000  000005b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001fb  00000000  00000000  00000772  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00000970  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001a7  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000096  00000000  00000000  00000b77  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00000c0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:


	RXD0 = RX
	TXD0 = TX
	*/
}
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ec       	ldi	r30, 0xC2	; 194
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e2       	ldi	r26, 0x20	; 32
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 32       	cpi	r26, 0x26	; 38
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  9e:	0c 94 df 00 	jmp	0x1be	; 0x1be <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Init>:

void USART_Init(){
	/* set baud rate */
	UBRR0H = UBRRH_VALUE;	// calculated by library
  a6:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;	// calculated by library
  aa:	83 e3       	ldi	r24, 0x33	; 51
  ac:	80 93 c4 00 	sts	0x00C4, r24
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);  
  b0:	88 e1       	ldi	r24, 0x18	; 24
  b2:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8 Data bits, 1 stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);		
  b6:	8e e0       	ldi	r24, 0x0E	; 14
  b8:	80 93 c2 00 	sts	0x00C2, r24

}
  bc:	08 95       	ret

000000be <USART_transmit>:

int USART_transmit(unsigned char data, FILE *stream){
  be:	98 2f       	mov	r25, r24
	while(!(UCSR0A&(1<<UDRE0))); // wait for empty transmit buffer
  c0:	e0 ec       	ldi	r30, 0xC0	; 192
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	85 ff       	sbrs	r24, 5
  c8:	fd cf       	rjmp	.-6      	; 0xc4 <USART_transmit+0x6>
	UDR0 = data;	// write data to transmit buffer
  ca:	90 93 c6 00 	sts	0x00C6, r25
	return 0;
}
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	08 95       	ret

000000d4 <main>:

//---------------------------------------------------
// routines

int main(void)
{
  d4:	cf 92       	push	r12
  d6:	df 92       	push	r13
  d8:	ef 92       	push	r14
  da:	ff 92       	push	r15
  dc:	0f 93       	push	r16
  de:	1f 93       	push	r17
  e0:	df 93       	push	r29
  e2:	cf 93       	push	r28
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
  e8:	2e 97       	sbiw	r28, 0x0e	; 14
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	f8 94       	cli
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	cd bf       	out	0x3d, r28	; 61
	USART_Init();
  f4:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>
	FILE str_uart = FDEV_SETUP_STREAM(USART_transmit, NULL, _FDEV_SETUP_WRITE);
  f8:	fe 01       	movw	r30, r28
  fa:	31 96       	adiw	r30, 0x01	; 1
  fc:	8e e0       	ldi	r24, 0x0E	; 14
  fe:	df 01       	movw	r26, r30
 100:	1d 92       	st	X+, r1
 102:	8a 95       	dec	r24
 104:	e9 f7       	brne	.-6      	; 0x100 <main+0x2c>
 106:	82 e0       	ldi	r24, 0x02	; 2
 108:	8c 83       	std	Y+4, r24	; 0x04
 10a:	8f e5       	ldi	r24, 0x5F	; 95
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	9a 87       	std	Y+10, r25	; 0x0a
 110:	89 87       	std	Y+9, r24	; 0x09
	stdout = &str_uart;
 112:	f0 93 23 01 	sts	0x0123, r31
 116:	e0 93 22 01 	sts	0x0122, r30

	
	printf("hello, world \n");
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	0e 94 aa 00 	call	0x154	; 0x154 <puts>
	
    /* Replace with your application code */
    while (1)	// loop
    {
		printf("fantimote alive! \n");
 122:	0f 2e       	mov	r0, r31
 124:	fe e0       	ldi	r31, 0x0E	; 14
 126:	cf 2e       	mov	r12, r31
 128:	f1 e0       	ldi	r31, 0x01	; 1
 12a:	df 2e       	mov	r13, r31
 12c:	f0 2d       	mov	r31, r0
 12e:	0f 2e       	mov	r0, r31
 130:	f0 e1       	ldi	r31, 0x10	; 16
 132:	ef 2e       	mov	r14, r31
 134:	f7 e2       	ldi	r31, 0x27	; 39
 136:	ff 2e       	mov	r15, r31
 138:	f0 2d       	mov	r31, r0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 13a:	08 ec       	ldi	r16, 0xC8	; 200
 13c:	10 e0       	ldi	r17, 0x00	; 0
 13e:	c6 01       	movw	r24, r12
 140:	0e 94 aa 00 	call	0x154	; 0x154 <puts>
 144:	97 01       	movw	r18, r14
 146:	c8 01       	movw	r24, r16
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <main+0x74>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 150:	d1 f7       	brne	.-12     	; 0x146 <main+0x72>
 152:	f5 cf       	rjmp	.-22     	; 0x13e <main+0x6a>

00000154 <puts>:
 154:	0f 93       	push	r16
 156:	1f 93       	push	r17
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	8c 01       	movw	r16, r24
 15e:	e0 91 22 01 	lds	r30, 0x0122
 162:	f0 91 23 01 	lds	r31, 0x0123
 166:	83 81       	ldd	r24, Z+3	; 0x03
 168:	81 ff       	sbrs	r24, 1
 16a:	21 c0       	rjmp	.+66     	; 0x1ae <puts+0x5a>
 16c:	c0 e0       	ldi	r28, 0x00	; 0
 16e:	d0 e0       	ldi	r29, 0x00	; 0
 170:	0d c0       	rjmp	.+26     	; 0x18c <puts+0x38>
 172:	e0 91 22 01 	lds	r30, 0x0122
 176:	f0 91 23 01 	lds	r31, 0x0123
 17a:	20 85       	ldd	r18, Z+8	; 0x08
 17c:	31 85       	ldd	r19, Z+9	; 0x09
 17e:	bf 01       	movw	r22, r30
 180:	f9 01       	movw	r30, r18
 182:	09 95       	icall
 184:	89 2b       	or	r24, r25
 186:	11 f0       	breq	.+4      	; 0x18c <puts+0x38>
 188:	cf ef       	ldi	r28, 0xFF	; 255
 18a:	df ef       	ldi	r29, 0xFF	; 255
 18c:	f8 01       	movw	r30, r16
 18e:	81 91       	ld	r24, Z+
 190:	8f 01       	movw	r16, r30
 192:	88 23       	and	r24, r24
 194:	71 f7       	brne	.-36     	; 0x172 <puts+0x1e>
 196:	e0 91 22 01 	lds	r30, 0x0122
 19a:	f0 91 23 01 	lds	r31, 0x0123
 19e:	20 85       	ldd	r18, Z+8	; 0x08
 1a0:	31 85       	ldd	r19, Z+9	; 0x09
 1a2:	8a e0       	ldi	r24, 0x0A	; 10
 1a4:	bf 01       	movw	r22, r30
 1a6:	f9 01       	movw	r30, r18
 1a8:	09 95       	icall
 1aa:	89 2b       	or	r24, r25
 1ac:	11 f0       	breq	.+4      	; 0x1b2 <puts+0x5e>
 1ae:	cf ef       	ldi	r28, 0xFF	; 255
 1b0:	df ef       	ldi	r29, 0xFF	; 255
 1b2:	ce 01       	movw	r24, r28
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	1f 91       	pop	r17
 1ba:	0f 91       	pop	r16
 1bc:	08 95       	ret

000001be <_exit>:
 1be:	f8 94       	cli

000001c0 <__stop_program>:
 1c0:	ff cf       	rjmp	.-2      	; 0x1c0 <__stop_program>
