
optiboot_attiny84.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000222  00001d00  00001d00  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00001ffe  00001ffe  00000296  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000000  00800060  00800060  00000298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      0000002f  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000002c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005e9  00000000  00000000  000002ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000029f  00000000  00000000  000008d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000307  00000000  00000000  00000b77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  00000e80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000212  00000000  00000000  00000f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000367  00000000  00000000  0000112e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001495  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00001d00 <main>:
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
    1d00:	11 24       	eor	r1, r1
   * 
   * Code by MarkG55
   * see discusion in https://github.com/Optiboot/optiboot/issues/97
   */
#if !defined(__AVR_ATmega16__)
  ch = MCUSR;
    1d02:	84 b7       	in	r24, 0x34	; 52
#else
  ch = MCUCSR;
#endif
  // Skip all logic and run bootloader if MCUSR is cleared (application request)
  if (ch != 0) {
    1d04:	88 23       	and	r24, r24
    1d06:	49 f0       	breq	.+18     	; 0x1d1a <main+0x1a>
       *  2. we clear WDRF if it's set with EXTRF to avoid loops
       * One problematic scenario: broken application code sets watchdog timer 
       * without clearing MCUSR before and triggers it quickly. But it's
       * recoverable by power-on with pushed reset button.
       */
      if ((ch & (_BV(WDRF) | _BV(EXTRF))) != _BV(EXTRF)) { 
    1d08:	98 2f       	mov	r25, r24
    1d0a:	9a 70       	andi	r25, 0x0A	; 10
    1d0c:	92 30       	cpi	r25, 0x02	; 2
    1d0e:	29 f0       	breq	.+10     	; 0x1d1a <main+0x1a>
	  if (ch & _BV(EXTRF)) {
    1d10:	81 ff       	sbrs	r24, 1
    1d12:	02 c0       	rjmp	.+4      	; 0x1d18 <main+0x18>
	       * prevent entering bootloader.
	       * '&' operation is skipped to spare few bytes as bits in MCUSR
	       * can only be cleared.
	       */
#if !defined(__AVR_ATmega16__)
	      MCUSR = ~(_BV(WDRF));  
    1d14:	97 ef       	ldi	r25, 0xF7	; 247
    1d16:	94 bf       	out	0x34, r25	; 52
#else
	      MCUCSR = ~(_BV(WDRF));  
#endif
	  }
	  appStart(ch);
    1d18:	fe d0       	rcall	.+508    	; 0x1f16 <appStart>
  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#endif
#endif

  // Set up watchdog to trigger after 1s
  watchdogConfig(WATCHDOG_1S);
    1d1a:	8e e0       	ldi	r24, 0x0E	; 14
    1d1c:	e9 d0       	rcall	.+466    	; 0x1ef0 <watchdogConfig>
  LED_DDR |= _BV(LED);
#endif

#ifdef SOFT_UART
  /* Set TX pin as output */
  UART_DDR |= _BV(UART_TX_BIT);
    1d1e:	d2 9a       	sbi	0x1a, 2	; 26
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    __boot_page_erase_short(address.word);
    1d20:	23 e0       	ldi	r18, 0x03	; 3
    1d22:	c2 2e       	mov	r12, r18

	    /*
	     * Copy data from the buffer into the flash write buffer.
	     */
	    do {
		__boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    1d24:	bb 24       	eor	r11, r11
    1d26:	b3 94       	inc	r11
	    } while (len -= 2);

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short(address.word);
    1d28:	35 e0       	ldi	r19, 0x05	; 5
    1d2a:	a3 2e       	mov	r10, r19
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
    1d2c:	cd d0       	rcall	.+410    	; 0x1ec8 <getch>

    if(ch == STK_GET_PARAMETER) {
    1d2e:	81 34       	cpi	r24, 0x41	; 65
    1d30:	71 f4       	brne	.+28     	; 0x1d4e <main+0x4e>
      unsigned char which = getch();
    1d32:	ca d0       	rcall	.+404    	; 0x1ec8 <getch>
    1d34:	f8 2e       	mov	r15, r24
      verifySpace();
    1d36:	e0 d0       	rcall	.+448    	; 0x1ef8 <verifySpace>
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
    1d38:	82 e8       	ldi	r24, 0x82	; 130
    1d3a:	f8 16       	cp	r15, r24
    1d3c:	f1 f0       	breq	.+60     	; 0x1d7a <main+0x7a>
	  putch(optiboot_version & 0xFF);
      } else if (which == STK_SW_MAJOR) {
    1d3e:	e1 e8       	ldi	r30, 0x81	; 129
    1d40:	fe 12       	cpse	r15, r30
    1d42:	02 c0       	rjmp	.+4      	; 0x1d48 <main+0x48>
	  putch(optiboot_version >> 8);
    1d44:	87 e0       	ldi	r24, 0x07	; 7
    1d46:	01 c0       	rjmp	.+2      	; 0x1d4a <main+0x4a>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    1d48:	83 e0       	ldi	r24, 0x03	; 3
    1d4a:	af d0       	rcall	.+350    	; 0x1eaa <putch>
    1d4c:	ab c0       	rjmp	.+342    	; 0x1ea4 <main+0x1a4>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    1d4e:	82 34       	cpi	r24, 0x42	; 66
    1d50:	11 f4       	brne	.+4      	; 0x1d56 <main+0x56>
      // SET DEVICE is ignored
      getNch(20);
    1d52:	84 e1       	ldi	r24, 0x14	; 20
    1d54:	03 c0       	rjmp	.+6      	; 0x1d5c <main+0x5c>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    1d56:	85 34       	cpi	r24, 0x45	; 69
    1d58:	19 f4       	brne	.+6      	; 0x1d60 <main+0x60>
      // SET DEVICE EXT is ignored
      getNch(5);
    1d5a:	85 e0       	ldi	r24, 0x05	; 5
    1d5c:	d5 d0       	rcall	.+426    	; 0x1f08 <getNch>
    1d5e:	a2 c0       	rjmp	.+324    	; 0x1ea4 <main+0x1a4>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    1d60:	85 35       	cpi	r24, 0x55	; 85
    1d62:	39 f4       	brne	.+14     	; 0x1d72 <main+0x72>
      // LOAD ADDRESS
      address.bytes[0] = getch();
    1d64:	b1 d0       	rcall	.+354    	; 0x1ec8 <getch>
    1d66:	c8 2f       	mov	r28, r24
      address.bytes[1] = getch();
    1d68:	af d0       	rcall	.+350    	; 0x1ec8 <getch>
    1d6a:	d8 2f       	mov	r29, r24
      }
      else {
        RAMPZ &= 0xFE;
      }
#endif
      address.word *= 2; // Convert from word address to byte address
    1d6c:	cc 0f       	add	r28, r28
    1d6e:	dd 1f       	adc	r29, r29
    1d70:	98 c0       	rjmp	.+304    	; 0x1ea2 <main+0x1a2>
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
    1d72:	86 35       	cpi	r24, 0x56	; 86
    1d74:	21 f4       	brne	.+8      	; 0x1d7e <main+0x7e>
        getNch(3);
        putch(0x00);
      }
#else
      // UNIVERSAL command is ignored
      getNch(4);
    1d76:	84 e0       	ldi	r24, 0x04	; 4
    1d78:	c7 d0       	rcall	.+398    	; 0x1f08 <getNch>
      putch(0x00);
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	e6 cf       	rjmp	.-52     	; 0x1d4a <main+0x4a>
#endif
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    1d7e:	84 36       	cpi	r24, 0x64	; 100
    1d80:	09 f0       	breq	.+2      	; 0x1d84 <main+0x84>
    1d82:	55 c0       	rjmp	.+170    	; 0x1e2e <main+0x12e>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    1d84:	a1 d0       	rcall	.+322    	; 0x1ec8 <getch>
    1d86:	a0 d0       	rcall	.+320    	; 0x1ec8 <getch>
    1d88:	f8 2e       	mov	r15, r24
      savelength = length;
      desttype = getch();
    1d8a:	9e d0       	rcall	.+316    	; 0x1ec8 <getch>
    1d8c:	d8 2e       	mov	r13, r24
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    1d8e:	ef 2c       	mov	r14, r15
      savelength = length;
      desttype = getch();
    1d90:	80 e6       	ldi	r24, 0x60	; 96
    1d92:	88 2e       	mov	r8, r24
    1d94:	91 2c       	mov	r9, r1

      // read a page worth of contents
      bufPtr = buff.bptr;
      do *bufPtr++ = getch();
    1d96:	98 d0       	rcall	.+304    	; 0x1ec8 <getch>
    1d98:	f4 01       	movw	r30, r8
    1d9a:	81 93       	st	Z+, r24
    1d9c:	4f 01       	movw	r8, r30
      while (--length);
    1d9e:	ea 94       	dec	r14
    1da0:	e1 10       	cpse	r14, r1
    1da2:	f9 cf       	rjmp	.-14     	; 0x1d96 <main+0x96>

      // Read command terminator, start reply
      verifySpace();
    1da4:	a9 d0       	rcall	.+338    	; 0x1ef8 <verifySpace>

#else
/*
 * AVR with 2-byte ISR Vectors and rjmp
 */
      if (address.word == rstVect0) {
    1da6:	20 97       	sbiw	r28, 0x00	; 0
    1da8:	19 f5       	brne	.+70     	; 0x1df0 <main+0xf0>
        // This is the reset vector page. We need to live-patch
        // the code so the bootloader runs first.
        //
        // Move RESET vector to 'save' vector
	// Save jmp targets (for "Verify")
	rstVect0_sav = buff.bptr[rstVect0];
    1daa:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <_edata>
    1dae:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <_edata+0x84>
	rstVect1_sav = buff.bptr[rstVect1];
    1db2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <_edata+0x1>
    1db6:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <_edata+0x85>
	saveVect0_sav = buff.bptr[saveVect0];
    1dba:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <_edata+0x8>
    1dbe:	20 93 e6 00 	sts	0x00E6, r18	; 0x8000e6 <_edata+0x86>
	saveVect1_sav = buff.bptr[saveVect1];
    1dc2:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <_edata+0x9>
    1dc6:	20 93 e7 00 	sts	0x00E7, r18	; 0x8000e7 <_edata+0x87>

	// Instruction is a relative jump (rjmp), so recalculate.
	// an RJMP instruction is 0b1100xxxx xxxxxxxx, so we should be able to
	// do math on the offsets without masking it off first.
	addr16_t vect;
	vect.bytes[0] = rstVect0_sav;
    1dca:	09 2f       	mov	r16, r25
	vect.bytes[1] = rstVect1_sav;
    1dcc:	18 2f       	mov	r17, r24
	vect.word = (vect.word-save_vect_num); //substract 'save' interrupt position
    1dce:	04 50       	subi	r16, 0x04	; 4
    1dd0:	11 09       	sbc	r17, r1
        // Move RESET jmp target to 'save' vector
        buff.bptr[saveVect0] = vect.bytes[0];
    1dd2:	00 93 68 00 	sts	0x0068, r16	; 0x800068 <_edata+0x8>
        buff.bptr[saveVect1] = (vect.bytes[1] & 0x0F)| 0xC0;  // make an "rjmp"
    1dd6:	81 2f       	mov	r24, r17
    1dd8:	8f 70       	andi	r24, 0x0F	; 15
    1dda:	80 6c       	ori	r24, 0xC0	; 192
    1ddc:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <_edata+0x9>
        // Add rjump to bootloader at RESET vector
        vect.word = ((uint16_t)main); // (main) is always <= 0x0FFF; no masking needed.
    1de0:	00 e8       	ldi	r16, 0x80	; 128
    1de2:	1e e0       	ldi	r17, 0x0E	; 14
        buff.bptr[0] = vect.bytes[0]; // rjmp 0x1c00 instruction
    1de4:	00 93 60 00 	sts	0x0060, r16	; 0x800060 <_edata>
	buff.bptr[1] = vect.bytes[1] | 0xC0;  // make an "rjmp"
    1de8:	81 2f       	mov	r24, r17
    1dea:	80 6c       	ori	r24, 0xC0	; 192
    1dec:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <_edata+0x1>
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, addr16_t mybuff,
			       addr16_t address, pagelen_t len)
{
    switch (memtype) {
    1df0:	f5 e4       	ldi	r31, 0x45	; 69
    1df2:	df 12       	cpse	r13, r31
    1df4:	01 c0       	rjmp	.+2      	; 0x1df8 <main+0xf8>
    1df6:	ff cf       	rjmp	.-2      	; 0x1df6 <main+0xf6>
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    __boot_page_erase_short(address.word);
    1df8:	fe 01       	movw	r30, r28
    1dfa:	c7 be       	out	0x37, r12	; 55
    1dfc:	e8 95       	spm
	    boot_spm_busy_wait();
    1dfe:	07 b6       	in	r0, 0x37	; 55
    1e00:	00 fc       	sbrc	r0, 0
    1e02:	fd cf       	rjmp	.-6      	; 0x1dfe <main+0xfe>
    1e04:	a0 e6       	ldi	r26, 0x60	; 96
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	fe 01       	movw	r30, r28

	    /*
	     * Copy data from the buffer into the flash write buffer.
	     */
	    do {
		__boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    1e0a:	8d 91       	ld	r24, X+
    1e0c:	9d 91       	ld	r25, X+
    1e0e:	0c 01       	movw	r0, r24
    1e10:	b7 be       	out	0x37, r11	; 55
    1e12:	e8 95       	spm
    1e14:	11 24       	eor	r1, r1
		addrPtr += 2;
	    } while (len -= 2);
    1e16:	fa 94       	dec	r15
    1e18:	fa 94       	dec	r15
    1e1a:	32 96       	adiw	r30, 0x02	; 2
    1e1c:	f1 10       	cpse	r15, r1
    1e1e:	f5 cf       	rjmp	.-22     	; 0x1e0a <main+0x10a>

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short(address.word);
    1e20:	fe 01       	movw	r30, r28
    1e22:	a7 be       	out	0x37, r10	; 55
    1e24:	e8 95       	spm
	    boot_spm_busy_wait();
    1e26:	07 b6       	in	r0, 0x37	; 55
    1e28:	00 fc       	sbrc	r0, 0
    1e2a:	fd cf       	rjmp	.-6      	; 0x1e26 <main+0x126>
    1e2c:	3b c0       	rjmp	.+118    	; 0x1ea4 <main+0x1a4>
      writebuffer(desttype, buff, address, savelength);


    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    1e2e:	84 37       	cpi	r24, 0x74	; 116
    1e30:	59 f5       	brne	.+86     	; 0x1e88 <main+0x188>
      uint8_t desttype;
      GETLENGTH(length);
    1e32:	4a d0       	rcall	.+148    	; 0x1ec8 <getch>
    1e34:	49 d0       	rcall	.+146    	; 0x1ec8 <getch>
    1e36:	d8 2e       	mov	r13, r24

      desttype = getch();
    1e38:	47 d0       	rcall	.+142    	; 0x1ec8 <getch>

      verifySpace();
    1e3a:	5e d0       	rcall	.+188    	; 0x1ef8 <verifySpace>
    1e3c:	7e 01       	movw	r14, r28
#endif
    default:
	do {
#ifdef VIRTUAL_BOOT_PARTITION
        // Undo vector patch in bottom page so verify passes
	    if (address.word == rstVect0) ch = rstVect0_sav;
    1e3e:	e1 14       	cp	r14, r1
    1e40:	f1 04       	cpc	r15, r1
    1e42:	19 f4       	brne	.+6      	; 0x1e4a <main+0x14a>
    1e44:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <_edata+0x84>
    1e48:	17 c0       	rjmp	.+46     	; 0x1e78 <main+0x178>
	    else if (address.word == rstVect1) ch = rstVect1_sav;
    1e4a:	f1 e0       	ldi	r31, 0x01	; 1
    1e4c:	ef 16       	cp	r14, r31
    1e4e:	f1 04       	cpc	r15, r1
    1e50:	19 f4       	brne	.+6      	; 0x1e58 <main+0x158>
    1e52:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <_edata+0x85>
    1e56:	10 c0       	rjmp	.+32     	; 0x1e78 <main+0x178>
	    else if (address.word == saveVect0) ch = saveVect0_sav;
    1e58:	88 e0       	ldi	r24, 0x08	; 8
    1e5a:	e8 16       	cp	r14, r24
    1e5c:	f1 04       	cpc	r15, r1
    1e5e:	19 f4       	brne	.+6      	; 0x1e66 <main+0x166>
    1e60:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <_edata+0x86>
    1e64:	09 c0       	rjmp	.+18     	; 0x1e78 <main+0x178>
	    else if (address.word == saveVect1) ch = saveVect1_sav;
    1e66:	e9 e0       	ldi	r30, 0x09	; 9
    1e68:	ee 16       	cp	r14, r30
    1e6a:	f1 04       	cpc	r15, r1
    1e6c:	19 f4       	brne	.+6      	; 0x1e74 <main+0x174>
    1e6e:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <_edata+0x87>
    1e72:	02 c0       	rjmp	.+4      	; 0x1e78 <main+0x178>
	    else ch = pgm_read_byte_near(address.bptr);
    1e74:	f7 01       	movw	r30, r14
    1e76:	84 91       	lpm	r24, Z
	    __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
#else
	    // read a Flash byte and increment the address
	    __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
#endif
	    putch(ch);
    1e78:	18 d0       	rcall	.+48     	; 0x1eaa <putch>
	} while (--length);
    1e7a:	da 94       	dec	r13
    1e7c:	ff ef       	ldi	r31, 0xFF	; 255
    1e7e:	ef 1a       	sub	r14, r31
    1e80:	ff 0a       	sbc	r15, r31
    1e82:	d1 10       	cpse	r13, r1
    1e84:	dc cf       	rjmp	.-72     	; 0x1e3e <main+0x13e>
    1e86:	0e c0       	rjmp	.+28     	; 0x1ea4 <main+0x1a4>

      read_mem(desttype, address, length);
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    1e88:	85 37       	cpi	r24, 0x75	; 117
    1e8a:	39 f4       	brne	.+14     	; 0x1e9a <main+0x19a>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    1e8c:	35 d0       	rcall	.+106    	; 0x1ef8 <verifySpace>
      putch(SIGNATURE_0);
    1e8e:	8e e1       	ldi	r24, 0x1E	; 30
    1e90:	0c d0       	rcall	.+24     	; 0x1eaa <putch>
      putch(SIGNATURE_1);
    1e92:	83 e9       	ldi	r24, 0x93	; 147
    1e94:	0a d0       	rcall	.+20     	; 0x1eaa <putch>
      putch(SIGNATURE_2);
    1e96:	8c e0       	ldi	r24, 0x0C	; 12
    1e98:	58 cf       	rjmp	.-336    	; 0x1d4a <main+0x4a>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    1e9a:	81 35       	cpi	r24, 0x51	; 81
    1e9c:	11 f4       	brne	.+4      	; 0x1ea2 <main+0x1a2>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    1e9e:	88 e0       	ldi	r24, 0x08	; 8
    1ea0:	27 d0       	rcall	.+78     	; 0x1ef0 <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    1ea2:	2a d0       	rcall	.+84     	; 0x1ef8 <verifySpace>
    }
    putch(STK_OK);
    1ea4:	80 e1       	ldi	r24, 0x10	; 16
    1ea6:	01 d0       	rcall	.+2      	; 0x1eaa <putch>
  }
    1ea8:	41 cf       	rjmp	.-382    	; 0x1d2c <main+0x2c>

00001eaa <putch>:
void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
  UART_UDR = ch;
#else
  __asm__ __volatile__ (
    1eaa:	2a e0       	ldi	r18, 0x0A	; 10
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	80 95       	com	r24
    1eb0:	08 94       	sec
    1eb2:	10 f4       	brcc	.+4      	; 0x1eb8 <putch+0xe>
    1eb4:	da 98       	cbi	0x1b, 2	; 27
    1eb6:	02 c0       	rjmp	.+4      	; 0x1ebc <putch+0x12>
    1eb8:	da 9a       	sbi	0x1b, 2	; 27
    1eba:	00 00       	nop
    1ebc:	15 d0       	rcall	.+42     	; 0x1ee8 <uartDelay>
    1ebe:	14 d0       	rcall	.+40     	; 0x1ee8 <uartDelay>
    1ec0:	86 95       	lsr	r24
    1ec2:	2a 95       	dec	r18
    1ec4:	b1 f7       	brne	.-20     	; 0x1eb2 <putch+0x8>
    1ec6:	08 95       	ret

00001ec8 <getch>:
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1ec8:	a8 95       	wdr
#endif
#endif

#ifdef SOFT_UART
    watchdogReset();
  __asm__ __volatile__ (
    1eca:	29 e0       	ldi	r18, 0x09	; 9
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	cb 99       	sbic	0x19, 3	; 25
    1ed0:	fe cf       	rjmp	.-4      	; 0x1ece <getch+0x6>
    1ed2:	0a d0       	rcall	.+20     	; 0x1ee8 <uartDelay>
    1ed4:	09 d0       	rcall	.+18     	; 0x1ee8 <uartDelay>
    1ed6:	08 d0       	rcall	.+16     	; 0x1ee8 <uartDelay>
    1ed8:	88 94       	clc
    1eda:	cb 99       	sbic	0x19, 3	; 25
    1edc:	08 94       	sec
    1ede:	2a 95       	dec	r18
    1ee0:	11 f0       	breq	.+4      	; 0x1ee6 <getch+0x1e>
    1ee2:	87 95       	ror	r24
    1ee4:	f7 cf       	rjmp	.-18     	; 0x1ed4 <getch+0xc>
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    1ee6:	08 95       	ret

00001ee8 <uartDelay>:
#if UART_B_VALUE > 255
#error Baud rate too slow for soft UART
#endif

void uartDelay() {
  __asm__ __volatile__ (
    1ee8:	9e e0       	ldi	r25, 0x0E	; 14
    1eea:	9a 95       	dec	r25
    1eec:	f1 f7       	brne	.-4      	; 0x1eea <uartDelay+0x2>
    1eee:	08 95       	ret

00001ef0 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    1ef0:	98 e1       	ldi	r25, 0x18	; 24
    1ef2:	91 bd       	out	0x21, r25	; 33
  WDTCSR = x;
    1ef4:	81 bd       	out	0x21, r24	; 33
    1ef6:	08 95       	ret

00001ef8 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    1ef8:	e7 df       	rcall	.-50     	; 0x1ec8 <getch>
    1efa:	80 32       	cpi	r24, 0x20	; 32
    1efc:	19 f0       	breq	.+6      	; 0x1f04 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    1efe:	88 e0       	ldi	r24, 0x08	; 8
    1f00:	f7 df       	rcall	.-18     	; 0x1ef0 <watchdogConfig>
    1f02:	ff cf       	rjmp	.-2      	; 0x1f02 <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    1f04:	84 e1       	ldi	r24, 0x14	; 20
    1f06:	d1 cf       	rjmp	.-94     	; 0x1eaa <putch>

00001f08 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    1f08:	cf 93       	push	r28
    1f0a:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    1f0c:	dd df       	rcall	.-70     	; 0x1ec8 <getch>
    1f0e:	c1 50       	subi	r28, 0x01	; 1
    1f10:	e9 f7       	brne	.-6      	; 0x1f0c <getNch+0x4>
  verifySpace();
}
    1f12:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    1f14:	f1 cf       	rjmp	.-30     	; 0x1ef8 <verifySpace>

00001f16 <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    1f16:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	ea df       	rcall	.-44     	; 0x1ef0 <watchdogConfig>
  // Note that appstart_vec is defined so that this works with either
  // real or virtual boot partitions.
  __asm__ __volatile__ (
    1f1c:	e4 e0       	ldi	r30, 0x04	; 4
    1f1e:	ff 27       	eor	r31, r31
    1f20:	09 94       	ijmp
